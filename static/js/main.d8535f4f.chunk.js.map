{"version":3,"sources":["Components/Preview/Preview.js","Components/Related/Related.js","Components/Profile/Profile.js","Components/Footer/Footer.js","Container/Main.js","App.js","serviceWorker.js","index.js"],"names":["ArtistPreview","props","react_default","a","createElement","className","src","profileImg","alt","artistName","onClick","showProfile","Related","_useState","useState","_useState2","Object","slicedToArray","artists","setArtists","_useState3","_useState4","error","setError","getRelatedArtists","useCallback","asyncToGenerator","regenerator_default","mark","_callee","res","json","wrap","_context","prev","next","fetch","concat","artistId","sent","data","t0","console","stop","useEffect","slice","map","artist","key","log","picture","name","nb_fan","Profile","Modal","isOpen","modal","Container","ModalHeader","toggle","close","ModalBody","Row","Col","sm","title","numFans","numAlbums","songName","bundle_default","audio","controls","Components_Related_Related","Footer","href","target","rel","initialState","inputValue","artistImg","relatedArtist","Main","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","updateInputValue","event","value","setState","getApiData","url","state","then","setData","catch","err","test","id","picture_medium","preview","_loop","n","prevState","toConsumableArray","getArtistProfileData","nb_album","inputEnterSubmit","preventDefault","stopPropagation","reset","react","InputGroup","Input","onChange","placeholder","onKeyDown","Button","type","color","Components_Profile_Profile","Preview_Preview","Components_Footer_Footer","Component","App","src_Container_Main","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d8535f4f.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport \"./Preview.scss\";\r\n\r\nconst ArtistPreview = props => {\r\n  return (\r\n    <div className=\"text-center\">\r\n      <img\r\n        src={props.profileImg}\r\n        alt={props.artistName}\r\n        onClick={props.showProfile}\r\n        className=\"previewImg\"\r\n      />\r\n      <p className=\"artist-name\">{props.artistName}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ArtistPreview;\r\n","import React, { useState, useCallback, useEffect } from \"react\";\r\n\r\nimport \"./Related.scss\";\r\n\r\nconst Related = props => {\r\n  // setup state\r\n  const [artists, setArtists] = useState(null);\r\n  const [error, setError] = useState(null);\r\n\r\n  // setup click handler\r\n  const getRelatedArtists = useCallback(async () => {\r\n    try {\r\n      // fetch data from API\r\n      const res = await fetch(`/artist/${props.artistId}/related`);\r\n      const json = await res.json();\r\n\r\n      // set state\r\n      setArtists(json.data);\r\n      setError(null);\r\n    } catch (e) {\r\n      console.error(e);\r\n      setError(\"Unable to find related artists\");\r\n    }\r\n  }, [props.artistId]);\r\n\r\n  // Used to automatic display related artists when Component is mounted\r\n  useEffect(() => {\r\n    getRelatedArtists();\r\n  }, []);\r\n\r\n  // setup render helper\r\n  const renderArtist = (artist, key) => {\r\n    console.log(artist);\r\n    return (\r\n      <div key={key} className=\"related-artist-box\">\r\n        <img src={artist.picture} alt={artist.name} className=\"relatedImg\" />\r\n        <p>{artist.name}</p>\r\n        <p>Fans: {artist.nb_fan}</p>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"mt-4\">\r\n      <div>\r\n        <p>Related artists</p>\r\n      </div>\r\n      {error}\r\n      {artists && artists.slice(0, 14).map(renderArtist)}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Related;\r\n","import React from \"react\";\r\nimport { Container, Row, Col, Modal, ModalHeader, ModalBody } from \"reactstrap\";\r\nimport ReactAudioPlayer from \"react-audio-player\";\r\n\r\nimport \"./Profile.scss\";\r\n\r\nimport Related from \"../Related/Related\";\r\n\r\nconst Profile = props => {\r\n  return (\r\n    <div>\r\n      <Modal isOpen={props.modal}>\r\n        <Container>\r\n          <ModalHeader toggle={props.close}>{props.artistName}</ModalHeader>\r\n          <ModalBody>\r\n            <Row>\r\n              <Col sm=\"4\">\r\n                <img\r\n                  src={props.profileImg}\r\n                  alt={props.artistName}\r\n                  className=\"mb-4\"\r\n                />\r\n              </Col>\r\n              <Col sm=\"8\">\r\n                <p>\r\n                  <i className=\"fas fa-users mr-4\" title=\"Fans\" />\r\n                  {props.numFans}\r\n                </p>\r\n                <p>\r\n                  <i className=\"fas fa-music mr-4\" title=\"Number of albums\" />\r\n                  {props.numAlbums}\r\n                </p>\r\n                <p>\r\n                  <i className=\"fas fa-microphone mr-4\" title=\"Songs\" />\r\n                  {props.songName}\r\n                </p>\r\n                <ReactAudioPlayer src={props.audio} controls />\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Related artistId={props.artistId} />\r\n            </Row>\r\n          </ModalBody>\r\n        </Container>\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Profile;\r\n","import React from \"react\";\r\nimport { Container } from \"reactstrap\";\r\n\r\nimport \"./Footer.scss\";\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <footer>\r\n      <Container>\r\n        <p>All results depends on the Deezer API</p>\r\n        <p>\r\n          Made by{\" \"}\r\n          <a\r\n            href=\"http://www.lukazrnic.com\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n          >\r\n            Luka Zrnic\r\n          </a>\r\n        </p>\r\n      </Container>\r\n    </footer>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","import React, { Component, Fragment } from \"react\";\r\nimport { Container, InputGroup, Input, Button } from \"reactstrap\";\r\n\r\nimport \"./Main.scss\";\r\n\r\nimport Preview from \"../Components/Preview/Preview\";\r\nimport Profile from \"../Components/Profile/Profile\";\r\nimport Footer from \"../Components/Footer/Footer\";\r\n\r\nconst initialState = {\r\n  inputValue: \"\",\r\n  artistImg: \"\",\r\n  artistName: \"\",\r\n  artistId: null,\r\n  numFans: null,\r\n  numAlbums: null,\r\n  audio: \"\",\r\n  songName: \"\",\r\n  showProfile: false,\r\n  relatedArtist: \"\",\r\n  error: \"\",\r\n  modal: false\r\n};\r\n\r\nclass Main extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = initialState;\r\n  }\r\n\r\n  // Get input data\r\n  updateInputValue = event => {\r\n    const artistName = event.target.value;\r\n    this.setState({\r\n      inputValue: artistName,\r\n      showProfile: false,\r\n      error: \"\"\r\n    });\r\n  };\r\n\r\n  // API request\r\n  getApiData = () => {\r\n    const url = `/search?q=artist:\"${this.state.inputValue}\"`;\r\n\r\n    fetch(url)\r\n      .then(res => res.json())\r\n      .then(res => {\r\n        this.setState({\r\n          songName: \"\",\r\n          showProfile: false\r\n        });\r\n        this.setData(res);\r\n      })\r\n      .catch(err => {\r\n        // checking if input field contains only space/spaces OR is empty string\r\n        if (\r\n          /^\\s+$/.test(this.state.inputValue) ||\r\n          this.state.inputValue === \"\"\r\n        ) {\r\n          this.setState({ error: \"Input field can't be empty!\" });\r\n        } else {\r\n          this.setState({\r\n            error: `Unable to find ${this.state.inputValue}`\r\n          });\r\n        }\r\n      });\r\n  };\r\n\r\n  // Setting data to show\r\n  setData = res => {\r\n    console.log(res);\r\n\r\n    const data = res.data[0];\r\n\r\n    const artistId = data.artist.id;\r\n    const artistName = data.artist.name;\r\n    const artistImg = data.artist.picture_medium;\r\n    const audio = data.preview;\r\n\r\n    for (let n in res.data) {\r\n      const data = res.data[n];\r\n      const songName = `${data.title}, `;\r\n\r\n      this.setState(prevState => ({\r\n        songName: [...prevState.songName, songName]\r\n      }));\r\n    }\r\n\r\n    this.setState({\r\n      artistId,\r\n      artistName,\r\n      artistImg,\r\n      audio\r\n    });\r\n  };\r\n\r\n  // API request for Artist profile\r\n  getArtistProfileData = () => {\r\n    const url = `/artist/${this.state.artistId}`;\r\n\r\n    fetch(url)\r\n      .then(res => res.json())\r\n      .then(res => {\r\n        const numAlbums = res.nb_album;\r\n        const numFans = res.nb_fan;\r\n\r\n        this.setState({\r\n          numAlbums,\r\n          numFans\r\n        });\r\n      })\r\n      .catch(err => console.log(err));\r\n  };\r\n\r\n  inputEnterSubmit = event => {\r\n    if (event.key === \"Enter\") {\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n      this.getApiData();\r\n    }\r\n  };\r\n\r\n  showProfile = () => {\r\n    this.setState(prevState => ({\r\n      modal: !prevState.modal,\r\n      showProfile: true\r\n    }));\r\n\r\n    this.getArtistProfileData();\r\n  };\r\n\r\n  reset = () => {\r\n    this.setState(initialState);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Fragment>\r\n        <section>\r\n          <Container className=\"container-center\">\r\n            <h1 className=\"text-center pb-4\">\r\n              Search for your favorite music artist\r\n            </h1>\r\n            <InputGroup>\r\n              <Input\r\n                value={this.inputValue}\r\n                onChange={this.updateInputValue}\r\n                placeholder=\"Type artist name\"\r\n                onKeyDown={this.inputEnterSubmit}\r\n              />\r\n              <Button type=\"submit\" color=\"primary\" onClick={this.getApiData}>\r\n                Search\r\n              </Button>\r\n            </InputGroup>\r\n\r\n            <p className=\"error-msg\">{this.state.error}</p>\r\n            {this.state.showProfile ? (\r\n              <Profile\r\n                profileImg={this.state.artistImg}\r\n                artistName={this.state.artistName}\r\n                artistId={this.state.artistId}\r\n                numFans={this.state.numFans}\r\n                numAlbums={this.state.numAlbums}\r\n                songName={this.state.songName}\r\n                audio={this.state.audio}\r\n                close={this.reset}\r\n                modal={this.state.modal}\r\n                toggle={this.toggle}\r\n              />\r\n            ) : (\r\n              <Preview\r\n                profileImg={this.state.artistImg}\r\n                artistName={this.state.artistName}\r\n                showProfile={this.showProfile}\r\n              />\r\n            )}\r\n          </Container>\r\n        </section>\r\n        <Footer />\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Main;\r\n","import React, { Component, Fragment } from \"react\";\n\nimport Main from \"./Container/Main\";\n\nclass App extends Component {\n  render() {\n    return (\n      <Fragment>\n        <Main />\n      </Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"./index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}